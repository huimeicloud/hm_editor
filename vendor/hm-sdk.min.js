/** 
 * @hmsdk/hm-sdk - v1.6.2-beta.7 
 * Create Date -2025-04-30 14:51:30
 * Copyright (c) 2025 gx; Licensed 
 */
var $base_tpl = {};


window.cdrServerHost='';
//业务组件库
window.commonHM={
    component:{
    }
}
/**
 * 遍历对象，转义script标签
 * @param {*} data 
 * @returns 
 */
function escapeScript (obj){
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            if (typeof obj[key] === "object") {
                escapeScript(obj[key]);
            } else if(typeof obj[key] === "string"){
                obj[key] = obj[key].replace(/<script>/gi, '&lt;script&gt;').replace(/<\/script>/gi, '&lt;/script&gt;');
            }
        }
    }
}
$.fn.extend({
	/**
	 * 渲染内容
	 * @param {*} content 
	 * @param {*} data 
	 * @param {*} callback 
	 * @returns 
	 */
	renderTpl: function (content, data, callback) {
		var _this = this;
		// 加载模板
		var html = "";
		try {
			template.config && template.config("escape", true);
			var render = template.compile(content);
			escapeScript(data);
			html = render(data || {});
		} catch (error) {
			// alert("art-template template.render() error!");
		}
		_this.html(html);
		// 模板加载完成通知回调
		callback && callback.call(_this);
		return this;
	},
	/**
	 * 渲染模板
	 * @param {*} path 
	 * @param {*} data 
	 * @param {*} callback 
	 * @returns 
	 */
	renderPath: function (path, data, callback) {
		var _this = this;
		$.ajax({
			type: "GET",
			url:path,
			timeout: 50000, //超时时间设置，单位毫秒
			dataType: "html",
			contentType: "application/json; charset=utf-8",
			success: function (htmlText) {
				var html = "";
				try {
					template.config && template.config("escape", true);
					var render = template.compile(htmlText);
					escapeScript(data);
					html = render(data || {});
				} catch (error) {
					// alert("art-template template.render() error!");
				}
				_this.html(html);
				// 模板加载完成通知回调
				callback && callback.call(_this);
			},
			complete: function (XMLHttpRequest, status) { //请求完成后最终执行参数
			},
			error: function (res) {
			}
		});
		return this;
	},
	/**
	 * 输入框相应消息过滤
	 * @param {*} onFocusCallback 
	 * @param {*} onBlurCallback 
	 * @param {*} time 
	 */
	inputTimer: function (onFocusCallback, onBlurCallback, time){
        var input = this[0];
		if(!input){
			return;
		}
        input.onfocus=function(ev){
			var e=window.event || ev;
			if(e.stopPropagation){
				e.stopPropagation();
			}else{
				e.cancelBubble = true;
			}
            var isInput = input.type=="textarea" || input.type=="text";
            var inputPrevValue = isInput?input.value:input.innerHTML;
            //开启timer 时时监控值的改变
            input._searchInputTimer = setInterval(function(){
                var currentValue = isInput?input.value:input.innerHTML;
                if(inputPrevValue != currentValue){
                    inputPrevValue =  currentValue;
                    onFocusCallback && onFocusCallback.call(input);
                }
            },time || 300);
        }
        input.onblur=function(){
            //清除timer的监控
            if(input._searchInputTimer){
                clearInterval(input._searchInputTimer);
                input._searchInputTimer = null;
                onBlurCallback && onBlurCallback.call(input);
            }
        }
    },
	/**
	 * 返回相对父视口的相对便宜
	 */
	offset2:function(target){
		var tar = this[0];
		var top =0,left=0;
		if(tar){
			top = tar.offsetTop;
			left = tar.offsetLeft;
			var parent = tar.offsetParent;
			if(target && !$(parent).hasClass(target)){
				while(parent){
					left+=parent.offsetLeft;
					top+=parent.offsetTop;
					parent = parent.offsetParent;
					if(parent &&  $(parent).hasClass(target)){
						parent = null;
					}
				}
			}
		}
		return {left: left, top: top};
	}
});
$.extend({
	/*
	 * ie8跨域请求
	 * @param opt.url 	请求地址
	 * @param opt.type 	请求方法  POST 或 GET
	 * @param opt.time 	请求超时
	 * @param opt.data 	请求参数
	 */
	xdr: function (opt) {

		var xdr;

		function alert_timeout() {
			// var error = new Error('xdr time out');
			// throw error;
		}

		function alert_progress() {
			// alert("XDR onprogress");
		}

		/*
		 * 请求
		 * @param url 		请求url
		 * @param metch 	请求方法
		 * @param data      请求参数字符串
		 * @param time      请求超时
		 */
		function req_init(url, metch, time, data, callback, errCalback) {
			var timeout = time || 10000;
			if (window.XDomainRequest) // Check whether the browser supports XDR. 
			{
				xdr = new XDomainRequest(); // Create a new XDR object.
				if (xdr) {
					// There is an error and the request cannot be completed. 
					// For example, the network is not available.
					xdr.onerror = function () {
						errCalback && errCalback(xdr);
					};

					// This event is raised when the request reaches its timeout. 
					xdr.ontimeout = alert_timeout;

					// When the object starts returning data, the onprogress event 
					// is raised and the data can be retrieved by using responseText.
					xdr.onprogress = alert_progress;

					// When the object is complete, the onload event is raised and 
					// the responseText ensures the data is available. 
					xdr.onload = function () {
						callback && callback(xdr.responseText);
					};
					setTimeout(function(){  // 服务响应较长时挂起问题
					},0);
					xdr.timeout = timeout;
					
					// The URL is preset in the text area. This is passed in the 
					// open call with a get request.
					xdr.open(metch || "GET", url);

					// The request is then sent to the server.  
					setTimeout(function(){
						xdr.send(data);
					}, 0);
				} else {
					// alert('Failed to create new XDR object.');
				}
			} else {
				// alert('XDR does not exist.');
			}
		}

		//初始化入口
		req_init(opt.url, opt.type, opt.timeout, opt.data, opt.success, opt.error);

	},
	getTpl:function(path, data,callback){
		var _this = this;
		// 加载模板
		var html = "";
		try {
			template.config && template.config("escape", true);
			var render = template.compile(path);
			escapeScript(data);
			html = render(data || {});
		} catch (error) {
			// alert("art-template template.render() error!");
		}
		return html;
	},
    getTplHtml:function(path, data, callback){
        $.ajax({
            type: "GET",
            url: path,
            data:{},
            success: function (htmlText) {
                var html = "";
                try {
                    var render = template.compile(htmlText);
                    html = render(data || {});
                } catch (error) {
                    alert("art-template template.render() error!");
                }
                // 模板加载完成通知回调
                callback && callback(html);
            },
            complete: function (XMLHttpRequest, status) { //请求完成后最终执行参数
                if (status == 'timeout') {
                    alert("art-template " + path + " time out!");
                }
            },
            error: function (res) {
                alert("art-template request error!");
            }
        });
    },
	//ie版本号
	IEVersion:function () {
		var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串 
		var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1; //判断是否IE<11浏览器 
		var isEdge = userAgent.indexOf("Edge") > -1 && !isIE; //判断是否IE的Edge浏览器 
		var isIE11 = userAgent.indexOf('Trident') > -1 && userAgent.indexOf("rv:11.0") > -1;
		if(isIE) {
			var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
			reIE.test(userAgent);
			var fIEVersion = parseFloat(RegExp["$1"]);
			if(fIEVersion == 7) {
				return 7;
			} else if(fIEVersion == 8) {
				return 8;
			} else if(fIEVersion == 9) {
				return 9;
			} else if(fIEVersion == 10) {
				return 10;
			} else {
				return 6;//IE版本<=7
			}  
		} else if(isEdge) {
			return 'edge';//edge
		} else if(isIE11) {
			return 11; //IE11 
		}else{
			return -1;//不是ie浏览器
		}
	},
	queryUrlParam : function (name) {
		var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
		var r = window.location.search.substr(1).match(reg);
		if (r !== null) return decodeURIComponent(r[2]);
		return null;
	},
	/**
	 * 创建类
	 */
	CreateClass:function(propty){
        var func = function () {
            this.init.apply(this, arguments);
            this.registerCommand && this.registerCommand();
        };
        if(propty){
            $.extend(func.prototype,propty);
        }
        return func;
	},
    CreateClass2: function (propty) {
        var func = function () {
            var children = [];
            for(var i = 0; i < this.subModule.length; i++){
                children.push(this.subModule[i](this));
            }
            this.init.apply(this, arguments);
            children.forEach(function(child){
                child.init && child.init();
            })
            this.registerCommand && this.registerCommand();
        };
        func.prototype = propty;
        func.prototype.subModule = [];
        if(propty && propty.config){
            func.config=propty.config;
        }
        func.fn = function(propty){
            $.extend(this.prototype,propty);
            return func;
        }
        func.fnSub = function(name,propty){
             var subFunc = function(parent){
              
                this.parent = parent;
                // this.init.apply(this, arguments);
             };
             subFunc.prototype = propty;
             this.prototype.subModule.push(function(_this){
                _this[name] = new subFunc(_this);
                return _this[name];
             })
           
            return func;
        }
        return func;
    },
	/**
	 * 设置cookie
	 * @param {*} key  产品唯一码， 端口或产品编码
	 * @param {*} name cookie 名称
	 * @param {*} value  
	 * @param {*} days  过期时间，默认无
	 * @param {*} isGlobal  是否全局
	 */
	skSetCookie:function(key,name,value,days,isGlobal){
		key=key||'';
        var Days = days || 0.5;
		var expires ="";
		if(days){
			var exp = new Date();
			exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
			expires = "; expires=" + exp.toUTCString();
		}
		var port=window.location.port,path='';
		if((!port||port==20080) && !isGlobal){
			var urlPath = window.location.href
			var matchArr =urlPath.match(/https*:\/\/[0-9.:]+\/([\w-]+)\//);
			path = (matchArr && matchArr.length>1)?matchArr[1]:'';
		}
        document.cookie = name + key + "=" + encodeURIComponent(value) + expires+";path=/"+path;
	},
	/**
	 * 获取cookie
	 * @param {*} key 产品唯一码， 端口或产品编码 同set
	 * @param {*} name 
	 */
	skGetCookie:function(key,name){
		key=key||'';
        var cookieArray = document.cookie.split("; ");
        for (var i = 0; i < cookieArray.length; i++) {
            var arr = cookieArray[i].split("=");
            if (arr[0] == name + key) return decodeURIComponent(arr[1]);
        }
        return "";
	},
	/**
	 * 添加localStorage 内容
	 * @param {*} key 产品唯一码， 端口或产品编码 同set
	 * @param {*} name 
	 */
	skSetStorage:function(key,obj){
		key=key||'sdkKey';
		if(window.localStorage){
			var val ;
			if(obj && typeof obj =='object'){
				val = JSON.stringify(obj);
			}
			window.localStorage.setItem(key,val);
		}
	},
	skGetStorage:function(key){
		var obj;
		if(window.localStorage){
			var str = window.localStorage.getItem(key);
			if(str){
				try{
					obj = JSON.parse(str);
				}catch(e){
				}
			}
		}
		return obj;
	},
	/**
	 * 获取hmsdk服务器地址
	 * @returns 
	 */
	getServerIp:function(){
		if(window.clientServerIp){
			return window.clientServerIp;
		}else{
			if(/127.0.0.1/.test(window.location.hostname)){
				return 'http://172.16.3.51';
			}else if(window.location.port=='20080'){
				return window.location.protocol+'//' + window.location.host ;
			} else{
				return window.location.protocol+'//' + window.location.hostname ;
			}
		}
	},
	getServerHost: function () {
        // return 'http://172.16.3.51:3052'
        // return 'http://127.0.0.1:3052';
        // return 'http://172.16.0.52:3052'
        if (window.cdrServerHost) {
            return window.cdrServerHost;
        } else {
            if (/locale|huimei|127.0.0.1/.test(window.location.hostname)) {
                return 'http://172.16.3.51:3052';

            }else if(window.location.port=='20080'){
                return window.location.protocol+'//' + window.location.host + '/taishan/hmsdk';
            } else{
                return window.location.protocol+'//' + window.location.hostname + '/taishan/hmsdk';
            } 
        }

    },
	loadJs:function(src,cbk){
        var script = document.createElement('script');
        script.src = src;
        if(script.readyState){
            script.onreadystatechange = function() {
                var r = script.readyState;
                if (r === 'loaded' || r === 'complete') {
                    script.onreadystatechange = null;
                    cbk && cbk();
                }
            };
        }else{
            script.onload = function(){
                cbk && cbk();
            }
        }
        var head = document.getElementsByTagName("head")[0];
        head.appendChild(script);
   },
	getUUId:function(i) {
		var d = new Date(),
			rand = parseInt(Math.random() * 1000);
		return d.getTime().toString(36) + rand.toString(36) + (i || '');
	}
});
var ajaxComplex =  window.ajaxTemp?window.ajaxTemp:$.ajax;
$.ajax = function(opt){
	var errApp = opt.error,successApp= opt.success;
	opt.error = function(res){
		if(errApp){
			errApp(res)
		}
		try{//拦截hmsdk 或祝融 ajax  未登录状态
			if (res.responseText) {
				var errData = JSON.parse(res.responseText);
				// 跳转到登录
				if (errData.code == 401) {
					$.sdkAuthorErr && $.sdkAuthorErr(errData);
				}
			}else if(res.code==401){
				$.sdkAuthorErr && $.sdkAuthorErr(res);
			}
		}catch(e){
		}
	}
	opt.success = function(res){
		if(res && res.code==401 && opt.error){
			opt.error(res);
		}else{
			successApp && successApp(res);
		}
	}
	//正常请求
	if (!window.XDomainRequest || opt.url.indexOf('http')==-1||  opt.url.indexOf(window.location.host) != -1) {
		return ajaxComplex(opt);
	} else {
		var data;
		if(opt.data && typeof opt.data =='object'){
			data = JSON.stringify(opt.data);
		}else{
			data = opt.data;
		}
        var infoParam = {};
        if (opt.headers) {
        // infoParam['api-extend-params'] = opt.header['api-extend-params'];
        infoParam['Huimei_id'] = opt.headers['Huimei_id'];
        infoParam = JSON.stringify(infoParam);
        infoParam = encodeURIComponent(infoParam);
        } else {
            infoParam = '';
        }
        var _newUrlWord='?_hm=';    
        if(opt.url.indexOf('?')!=-1){    
        _newUrlWord='&_hm=';    
        }
		//待添加
		$.xdr({
			timeout: 10000,
			type: opt.type || "POST",
			url: opt.url+_newUrlWord+infoParam,
			data: data,
			success: function (res) {
				res = JSON.parse(res);
				opt.success && opt.success.call(this, res);
			},
			error: function (res) {
				opt.error && opt.error.call(this, res);
			}
		});
	}
};

// var sdk_full_path = '';
// if(document.currentScript && document.currentScript.src && document.currentScript.src.indexOf('hm-sdk')!=-1){
// 	sdk_full_path = document.currentScript.src;
// }else{
// 	var hostname= window.location.hostname;
// 	if(/locale|huimei|127.0.0.1/.test(hostname)){
// 		sdk_full_path = 'http://'+hostname+':3052/hm-sdk.min.css';
// 		// sdk_full_path = 'http://172.16.3.51:3052/hm-sdk.min.css';
// 	}else{
// 		sdk_full_path = '/hmsdk/hm-sdk.min.css';
// 	}
// }
// var sdk_path = sdk_full_path.substring(0,sdk_full_path.lastIndexOf("/")+1);
// var link = document.createElement("link");
// link.type = "text/css";
// link.rel = "stylesheet";
// link.href = sdk_path+'hm-sdk.min.css';
// document.getElementsByTagName("head")[0].appendChild(link);
	
//组件库公用事件
$(document).on('click',function(){
	$('.sk-select-body').removeClass('sk-show');
	$('.sk-drop-body').removeClass('sk-show');
	$('.sk-treeDrop-body').removeClass('sk-show');
});
$(window).on('resize', function () {
	$('.sk-dialog-container').each(function(i,item){
		var container = $(item);
		var left = ($(window).width()-container.width())/2;
		var top = ($(window).height()-container.height())/2;
		container.css({left:left,top:top});
	});

});
 if (window.addEventListener) {
	// window.removeEventListener('scroll', function () {}, false);
	// window.addEventListener('scroll', function () {
	// 	skScrollSelDrop();
	// }, true);
}
function skScrollSelDrop(){
	$('.sk-select-body.sk-show,.sk-drop-body.sk-show').each(function(i,item){
		var selBody = $(item);
		if(selBody.data('inside')){
			return;
		}
		var container = $('.sk-select[sel_id='+uuid+']');
		if(selBody.hasClass('sk-select-body')){
			var uuid =selBody.attr('sel_id');
			container = $('.sk-select[sel_id='+uuid+']');
		}else{
			var uuid =selBody.attr('drop_id');
			container = $('.sk-drop[drop_id='+uuid+']');
		}
		var windowHeight = $(window).height();
		rect=container[0].getBoundingClientRect();
		var type=2;
		if(windowHeight-rect.bottom<100){
			type=1;
		}
		var pos = container.offset();
		var w = container.outerWidth(),h=container.outerHeight(),cw=selBody.outerWidth(),ch=selBody.outerHeight();
		var itemPos;
		if(type==1){//上
			itemPos= {left:pos.left+w/2-cw/2,top:pos.top-ch-2};
		}else if(type==2){//下
			itemPos= {left:pos.left+w/2-cw/2,top:pos.top+h+2};
		}
		selBody.css(itemPos);
	});
}

var $dialog_tpl = {};

$dialog_tpl["dialog/tpl/dialog"] = "<div class=\"sk-model-dialog\"><div class=\"sk-model-header\"><i class=\"sk-model-close icon-sk-close\" aria-hidden=\"true\"></i></div><div class=\"sk-model-content\"></div><div class=\"sk-model-footer\"></div></div>";

$.extend({
    /**
     * 
     * @param {*
     *    tplPath:'', //模板路径
     *    tplData:{} //模板数据
     *    tplHtml:'' //直接渲染
     *    cbk:function(){}  //回调
     *   } options 
     * @returns 
     */
	modelDialog: function (options) {
        var defaults={
            tplPath:'',
            tplData:{},
            tplHtml:''
        };
        var opts = $.extend({}, defaults, options);
       
        var dialog = {
            opts:opts,
            //弹出框初始化
            init:function(cbk){
                var _t =this;
              
                if($('.sk-dialog-container').length){
                    var index = parseInt($('.sk-dialog-container').css('z-index'));
                    if(!isNaN(index)){
                        zIndex = index+1;
                    }
                }
                
                _t.shadowBox =$("<div class='sk-dialog-shadow'>");
                var tempDiv=$('<div>');
                var tempModel=$('<div>');
                tempModel.renderTpl($dialog_tpl['dialog/tpl/dialog']);
                $('body').append(_t.shadowBox);
                if(_t.opts.tplPath){
                    tempDiv.renderPath(_t.opts.tplPath,_t.opts.tplData,function(){
                        _t.renderDone(tempDiv,tempModel);
                    });
                }else if(_t.opts.tplHtml){
                    tempDiv.renderTpl(_t.opts.tplHtml);
                    _t.renderDone(tempDiv,tempModel);
                }
            },
            renderDone:function(tempDiv,tempModel){
                var _t = this;
                var zIndex=100000000;
                var dialog = tempDiv.find('.sk-dialog');
                _t.container = dialog;
                _t.container.addClass('sk-dialog-container');
                _t.container.find('.sk-model-dialog').append(dialog);
                var orignHeader = dialog.find('.sk-dialog-header');
                var orignFooter = dialog.find('.sk-dialog-footer');
                var header=tempModel.find('.sk-model-header'),footer=tempModel.find('.sk-model-footer');
                var body = tempModel.find('.sk-model-content').append(dialog.find('.sk-dialog-content'));
                dialog.empty()
                $('body').append(dialog);
                if(orignHeader.length){
                    header.append(orignHeader);
                    dialog.append(header);
                }else{
                    header.remove();
                }
                dialog.append(body);
                if(orignFooter.length){
                    footer.append(orignFooter);
                    dialog.append(footer);
                }else{
                    footer.remove();
                }
                body.height(_t.container.height()-header.height()-footer.height());
                var left = ($(window).width()-_t.container.width())/2;
                var top = ($(window).height()-_t.container.height())/2;
                _t.container.css({left:left,top:top});
                _t.bindAction();
               
                _t.shadowBox.css({zIndex:zIndex});
                _t.container.css({zIndex:zIndex+1});
                _t.opts.cbk && _t.opts.cbk();
            },
            show:function(){
                var _t = this;
               

            },
            //移除
            hide:function(){
                var _t = this;
            },
            //移除
            remove:function(){
                var _t = this;
                _t.container.remove();
                _t.shadowBox.remove();
            },
            bindAction:function(){
                var _t = this;
               _t.container.find('.sk-model-close').on('click',function(){
                    _t.remove();
               });
            }
            
        };
        dialog.init();

        return dialog;
	}

});
var $popup_tpl = {};

$popup_tpl["popup/tpl/popup"] = "<div class=\"sk-popup-container\"> <%=#message%> </div><i class=\"sk-popup-icon\"></i>";

$.fn.extend({
    /**
     * 
     * @param {*
     *    type:1:上，2：下，3：左，4：右,5:auto
     *    message："" 展示的内容,
     *    theam:1橙色，2：黑色，默认：1
     *    width:200px,
     *   } options 
     * @returns 
     */
	popupMessage: function (options) {
        var defaults={
            message:"",
            type:1,
            theam:1,
            width:"200px",
            inside:false
        };
        var opts = $.extend({}, defaults, options);
        var container =$('<div class="sk-popup">');
        if(opts.inside){
            this.append(container)
        }else{
            $(opts.container||document.body).append(container);
            // $(document.body).append(container);
        }
        container.css({width:opts.width});
        if(opts.theam==2){
            container.addClass('sk-popu-black');
        }
        container.renderTpl($popup_tpl['popup/tpl/popup'],{message:opts.message});
        container.on('click',function(ev){
            var e=window.event || ev;
			if(e.stopPropagation){
				e.stopPropagation();
			}else{
				e.cancelBubble = true;
			}
        })
       
        var popup = {
            opts:opts,
            setPostion:function(type,margin,cusPos){
                var _t = this;
                cusPos = cusPos||{};
                var pos = _t.relEl.offset();
                if(_t.opts.container && _t.relEl[0] && !_t.opts.inline){
                    pos = {left:cusPos.offsetLeft||_t.relEl[0].offsetLeft,top:_t.relEl[0].offsetTop}
                }
                var w = _t.relEl.outerWidth(),h=cusPos.height||_t.relEl.outerHeight(),cw=_t.container.outerWidth(),ch=_t.container.outerHeight();
                if(_t.opts.inside){
                    pos={left:0,top:0};
                }
                if(_t.relEl[0] && !_t.relEl[0].clientWidth){
                    w=40;
                }
                var icon = _t.container.find('.sk-popup-icon').addClass('sk-popup-icon-'+renderType);
                var icw = icon.outerWidth(),ich=icon.outerHeight();
                var basWMar = cw/2,basHMar = margin||ch/2;
               
                var itemPos,iconPos;
                if(type==1){//上
                    itemPos= {left:pos.left+w/2-basWMar-(margin||0),top:pos.top-ch-6};
                    iconPos = {left:basWMar-icw/2,bottom:-9};
                }else if(type==2){//下
                    itemPos= {left:pos.left+w/2-basWMar-(margin||0),top:pos.top+h+9};
                    iconPos = {left:basWMar-icw/2-2,top:-9};
                }else if(type==3){//左
                    itemPos= {left:pos.left-cw-6,top:pos.top+h/2-basHMar};
                    iconPos = {top:basHMar-ich/2,right:-9};
                }else if(type==4){//右
                    itemPos= {left:pos.left+w+10,top:pos.top+h/2-basHMar};
                    iconPos = {top:basHMar-ich/2,left:-9};
                }
                itemPos.left = cusPos.left||itemPos.left;
                itemPos.top = cusPos.top||itemPos.top;
                _t.container.css(itemPos);
                if(cusPos.left){
                    delete iconPos.left;
                }
                icon.css(iconPos);
                
            },

            hide:function(){
                this.container.hide();
            },
            show:function(){
                this.container.show();
            },
            remove:function(){
                this.container.remove();
            }
        };
        popup.container = container;
        popup.relEl = this;
        var renderType;
        if(opts.type==5){
            rect=this[0].getBoundingClientRect();
            var temp = [{type:1,val:rect.top},{type:2,val:rect.bottom},{type:3,val:rect.left},{type:4,val:rect.right}];
            var poType;
            for(var i=0;i<temp.length;i++){
                var item = temp[i];
                if(!poType){
                    poType = item;
                }else if(poType.val<item.val){
                    poType = item;
                }
            }
            renderType = poType.type;
        }else {
            renderType = opts.type;
        }
        var position =popup.setPostion(renderType);
        
        // switch(renderType){
        //     case 1:;break;
        //     default:
        // }

        return popup;
	}

});
var $dropdown_tpl = {};

$dropdown_tpl["dropdown/tpl/content"] = "<div class=\"sk-drop-cont\"><div class=\"sk-drop-search\"><input type=\"text\" class=\"sk-search-input\" holderlan=\"sk0002\" placeholder=\"关键词...\"> <i class=\"fa fa-search sk-search-icon\" aria-hidden=\"true\"></i></div><div class=\"sk-drop-ser-cont\"></div></div>";

$dropdown_tpl["dropdown/tpl/list"] = "<%if(data.length>0){%> <ul class=\"sk-drop-ul\"> <%if(multiple){%> <li class=\"sk-drop-li\" flag=\"all\"><i class=\"fa fa-square-o sk-drop-check\" aria-hidden=\"true\"></i> <i class=\"fa fa-check-square sk-drop-square-check\" aria-hidden=\"true\"></i> <span class=\"sk-drop-li-text\" lan=\"sk0003\">全部</span></li> <%}%> <%for(var j=0;j< data.length;j++){%> <% var item =data[j]; %> <li class=\"sk-drop-li <%=item.checked?'sk-active':''%>\" flag=\"<%=item[key]%>\"><i class=\"fa fa-square-o sk-drop-check\" aria-hidden=\"true\"></i> <i class=\"fa fa-check-square sk-drop-square-check\" aria-hidden=\"true\"></i> <span class=\"sk-drop-li-text\"><%=item[text]%> </span></li> <%}%> </ul> <%}else{%> <div class=\"sk-drop-nodata\">未找到搜索结果</div> <%}%>";

$dropdown_tpl["dropdown/tpl/select"] = "<div class=\"\"><div class=\"sk-drop-tit\"><div class=\"sk-drop-tit-c\"></div><span class=\"sk-drop-default-txt\"><%=autoText%></span><span class=\"sk-drop-num\">20</span></div><i class=\"fa fa-angle-down sk-drop-icon\" aria-hidden=\"true\"></i> <i class=\"fa fa-times-circle-o sk-point-close\" aria-hidden=\"true\"></i></div>";

$dropdown_tpl["dropdown/tpl/tit"] = "<span class=\"sk-drop-tit-span\"> <%=text%> </span><i class=\"fa fa-times-circle\" aria-hidden=\"true\"></i>";

$.fn.extend({
    /**
     * 
     * @param {*
     *    display:{key:"code",text:"name"},自定义主键和显示文字
     *    defaultSelect:[],默认选中
     *    selectTab:  boolean 是否把选中内容放在title 区域 默认true
     *    multiple:true, //false:单选，true:多选  默认true
     *    data:[],
     *    clear: boolean  清除按钮
     *    choose:'' fun    选中回调
     *    cancel:'' fun  取消回调
     *    multipleExpend: false  多选数据展开显示，不隐藏
     *    useAsyncRenderData: false  是否使用异步加载下拉数据
     *    asyncRenderDataFn: fn 异步回调
     *   } options 
     * @returns 
     */
	dropDown: function (options) {
        var defaults={
            display:{},
            defaultSelect:'',
            selectTab:true,
            data:[],
            inside:false,
            multiple:true,
            clear:true,
            choose:'',
            cancel:'',
            multipleExpend: false,
            useAsyncRenderData: false,
            asyncRenderDataFn: function(val, renderFn) {}
        };
        var R = window.LanData_SK[$.locale||'zh'].R;
        var opts = $.extend({}, defaults, options);
        var container =this;
        this.empty();
        var drop = {
            opts:opts,
            selectBody:'',
            checkedData:{},
            orignData:[],   //所有数据
            currDataList:opts.data,//当前使用中的数据
            container:container,
            key:'',//自定义主键
            text:'',//自定义显示名
            disabled:false, //是否可用
            autoText:'',//无选中项时显示文字
            catcheTabList:[],//队列中的tab
            init:function(){
                var _t = this;
                _t.uuid = new Date().getTime()+''+parseInt(Math.random() * 1000);
                $.extend(true,_t.orignData,_t.opts.data),   //所有数据
                _t.container.addClass('sk-drop').attr('drop_id',_t.uuid);
                _t.container.prop('tabindex',0).prop('hideFocus',true);
                _t.autoText = _t.container[0].innerText||R['sk0004'];//默认显示项
                _t.key = _t.opts.display.key||'code';
                _t.text = _t.opts.display.text||'name';
                _t.selectBody = $('<div class="sk-drop-body" drop_id="'+_t.uuid+'">');
                _t.container.renderTpl($dropdown_tpl['dropdown/tpl/select'],{data:opts.data,autoText:_t.autoText});
                _t.selectBody.renderTpl($dropdown_tpl['dropdown/tpl/content'],{});
                _t.selectBody.find('.sk-drop-ser-cont').renderTpl($dropdown_tpl['dropdown/tpl/list'],{data:opts.data,key:_t.key,text:_t.text,multiple:_t.opts.multiple});
                _t.titlePanel = _t.container.find('.sk-drop-tit');
                _t.titlePanelContent = _t.container.find('.sk-drop-tit-c'); //tab 面板区域
                if(!_t.opts.multiple){
                    _t.titlePanelContent.hide();
                    _t.container.find('.sk-drop-default-txt').css({"display":"block"});
                }
                _t.maxTabCount = parseInt((_t.titlePanel.width()-25)/72)||1;  //最大tab数量
                if(_t.opts.inside==true){
                    _t.container.append(_t.selectBody);
                    _t.selectBody.data('inside',_t.opts.inside);
                }else{
                    $('body').append(_t.selectBody);
                }
                _t.selectBody.width(_t.container.width());
                if(!_t.opts.multiple){//单选
                    _t.selectBody.addClass('sk-single-drop');
                    _t.container.addClass('sk-single-drop');
                }   
                if(_t.opts.clear){//单选
                    _t.container.addClass('sk-single-drop-clear-box');
                    _t.selectBody.addClass('sk-single-drop-clear-box');
                }   
                _t.cacheData = {};
                for(var i=0;i<_t.orignData.length;i++){
                    var temp = _t.orignData[i];
                    if(temp[_t.key]){
                        _t.cacheData[temp[_t.key]] = temp;
                    }
                    
                }
                _t.bindAction();
                
            },
            updateOriginData: function(list) {
                var _t = this;
                _t.orignData = list;
                for(var i=0;i<_t.orignData.length;i++){
                    var temp = _t.orignData[i];
                    if(temp[_t.key]){
                        _t.cacheData[temp[_t.key]] = temp;
                    }
                }
            },
            /**
             * 获取当前选中数据
             */
            getSelect:function(){
                var _t = this;
                var list = [];
                for(var i=0;i<_t.orignData.length;i++){
                    var temp = _t.orignData[i];
                    if(temp.checked){
                        list.push(temp);
                    }
                }
                return list;
            },
            /**
             * 设置选中状态
             * @param {*} arr 
             */
            setSelect:function(arr){
                var _t = this;
                arr = arr||[];
                _t.selectBody.find('.sk-active').removeClass('sk-active');
                if(!_t.opts.multiple && arr.length){
                    _t.container.find('.sk-drop-tit').addClass('sk-active');
                    arr = [arr[0]];
                }else{
                    _t.container.find('.sk-drop-tit').removeClass('sk-active');
                }
                if(arr.length){
                    for(var i in _t.cacheData){
                        var contain=false;
                        for(var j=0;j<arr.length;j++){
                            if(i==arr[j]){
                                contain = true;
                                break;
                            }
                        }
                        if(_t.cacheData[i]){
                            if(contain){
                                _t.cacheData[i].checked=true;
                                _t.selectBody.find('li[flag="'+i+'"]').addClass('sk-active');
                            }else{
                                _t.cacheData[i].checked=false;
                            }
                        }
                       
                    }
                   
                }else{
                    _t.clearAll();
                }
                _t.manageTitSpan();
                
            },
            /**
             * 设置不可用
             */
            setDisable:function(flag){
                var _t = this;
                _t.disabled = flag;
                if(flag){
                    _t.container.addClass('sk-disabled');
                }else{
                    _t.container.removeClass('sk-disabled');
                }
               
            },

            bindAction:function(){
                var _t = this;
                _t.container.off().on('click','.sk-drop-tit',function(){
                    if(_t.disabled){
                        return;
                    }
                    _t.maxTabCount = parseInt((_t.titlePanel.width()-25)/72)||1;  //最大tab数量
                    _t.selectBody.width(_t.container.width());
                    var type = _t.calPostion();
                    _t.setPostion(type);
                    //关闭其他展示框
                    $('.sk-drop-body').removeClass('sk-show');
                    $('.sk-select-body').removeClass('sk-show');
                    $('.sk-treeDrop-body').removeClass('sk-show');
                    _t.selectBody.toggleClass('sk-show');
                    _t.renderData(_t.orignData);
                    _t.selectBody.find('.sk-search-input').val('');
                    return false;
                }).on('click','.sk-point-close',function(){
                    _t.selectBody.find('.sk-drop-li').removeClass('sk-active');
                    _t.container.find('.sk-drop-tit').removeClass('sk-active');
                    var obj={};
                   _t.clearAll();
                    _t.manageTitSpan();
                    _t.opts.cancel &&  _t.opts.cancel(obj);
                    return false;
                });
                //tab 删除
                _t.container.on('click','.fa-times-circle',function(){
                    var tab = $(this).closest('.sk-dop-tit-p');
                    var flag = tab.attr('flag');
                    _t.cacheData[flag].checked=false;
                    var li = _t.selectBody.find('li[flag="'+flag+'"]');
                    if(li.length){
                        li.removeClass('sk-active');
                        _t.selectBody.find('li[flag=all]').removeClass('sk-active');
                    }
                    _t.manageTitSpan();
                    _t.opts.cancel &&  _t.opts.cancel(_t.cacheData[flag]);
                    return false;
                });
                _t.selectBody.find('.sk-search-input').inputTimer(function(){
                    var val=$(this).val();
                    if(_t.opts.useAsyncRenderData && typeof _t.opts.asyncRenderDataFn === 'function'){
                        if(!val) { return }
                        _t.opts.asyncRenderDataFn(val, (function(_t){
                            return function (currDataList){
                                var list =[];
                                if(currDataList && typeof currDataList=='object'){
                                    list = JSON.parse(JSON.stringify(currDataList));
                                }
                                var lastList = [], checkedKeys = [];
                                for(var i=0; i<_t.orignData.length; i++){
                                    var cur = _t.orignData[i]
                                    if(cur.checked){
                                        lastList.push(cur);
                                        checkedKeys.push(cur[_t.key]);
                                    }
                                };
                                var tempArr = []
                                for(var i = 0; i<list.length; i++){
                                    var cur = list[i]
                                    if((','+checkedKeys.join(',')+',').indexOf(','+cur[_t.key]+',') === -1){
                                        tempArr.push(cur)
                                    }
                                }
                                var finallList = tempArr.concat(lastList)
                                _t.renderData(finallList)
                                _t.updateOriginData(finallList)
                            }
                        })(_t))
                    }else{
                        var currDataList = [];
                        for(var i=0;i<_t.orignData.length;i++){
                            var temp = _t.orignData[i];
                            if(val){
                                if((temp[_t.text]||'').indexOf(val)!=-1){
                                    currDataList.push(temp);
                                }
                            }else{
                                currDataList.push(temp);
                            }
                           
                        }
                        _t.renderData(currDataList);
                    }
                },null,300);
                //列表选择
                _t.selectBody.on('click','li',function(e){
                    
                    var el={};
                    var flag = $(this).attr('flag');
                    var act = $(this).hasClass('sk-active');

                    if(_t.opts.multiple){
                        if(flag=='all'){//全部
                            if(act){
                                _t.selectBody.find('.sk-drop-li').removeClass('sk-active');
                                for(var i=0;i<_t.currDataList.length;i++){
                                    var temp = _t.currDataList[i];
                                    temp.checked = false;
                                }
                            }else{
                                _t.selectBody.find('.sk-drop-li').addClass('sk-active');
                                for(var i=0;i<_t.currDataList.length;i++){
                                    var temp = _t.currDataList[i];
                                    temp.checked = true;
                                }
                            }
                            el[_t.key] = 'all';
                           
                        }else{
                            el = _t.cacheData[flag];
                            if(act){
                                el.checked = false;
                                $(this).removeClass('sk-active');
                            }else{
                                el.checked = true;
                                $(this).addClass('sk-active');
                            }
                        }
                        _t.manageTitSpan();
                        if(act){//取消
                            _t.opts.cancel &&  _t.opts.cancel(el);
    
                        }else{//选中
                            _t.opts.choose &&  _t.opts.choose(el);
                        }
                        return false;
                    }else{//单选
                        
                       _t.clearAll();
                        el = _t.cacheData[flag];
                        el.checked = true;
                        _t.selectBody.find('.sk-drop-li').removeClass('sk-active');
                        _t.container.find('.sk-drop-tit').addClass('sk-active');
                        $(this).addClass('sk-active');
                        _t.manageTitSpan();
                        _t.opts.choose &&  _t.opts.choose(el);
                    }
                   
                }).on('click','.sk-drop-search',function(){
                    return false;
                });
            },
            clearAll:function(){
                var _t = this;
                for(var i=0;i<_t.orignData.length;i++){
                    var temp = _t.orignData[i];
                    temp.checked = false;
                }
            },
            //渲染下拉列表
            renderData:function(arr){
                var _t = this;
                _t.currDataList= arr;
                _t.selectBody.find('.sk-drop-ser-cont').renderTpl($dropdown_tpl['dropdown/tpl/list'],{data:_t.currDataList,key:_t.key,text:_t.text,multiple:_t.opts.multiple});
            },
            /**
             * 处理标题tab 签
             * flag:1:添加，2：删除
             */
            manageTitSpan:function(){
                var _t =this;
                var list =_t.getSelect()||[];
                _t.container.focus();
                _t.container.data('drop_val',list.length);
                if(_t.opts.multiple){//多选
                    if(_t.opts.selectTab==false){
                        return;
                    }
                    if(_t.opts.multipleExpend){ // 选中项展开显示
                        _t.container.find('.sk-drop-num').hide(); // 角标数字隐藏
                        if(list.length){
                            _t.titlePanel.find('.sk-drop-default-txt').hide();
                        }else{
                            _t.titlePanel.find('.sk-drop-default-txt').show();
                        }
                        _t.titlePanelContent.empty();
                        for(var i=list.length-1;i>=0;i--){
                            var el = list[i];
                            var temp = $("<span>");
                            temp.addClass('sk-dop-tit-p').attr("flag",el[_t.key]);
                            _t.titlePanelContent.append(temp);
                            temp.renderTpl($dropdown_tpl['dropdown/tpl/tit'],{text:el[_t.text]});
                            temp.css({ padding: '0 10px'})
                            temp.find('.sk-drop-tit-span').removeClass('sk-drop-tit-span')
                        }
                        return
                    }
                    var width;
                    if(list.length){
                        _t.titlePanel.find('.sk-drop-default-txt').hide();
                        if(list.length>_t.maxTabCount){//右边剩余角标需要显示
                            var count = list.length-_t.maxTabCount;
                            _t.titlePanel.find('.sk-drop-num').html(count>9?"9+":count).show();
                            width =Math.floor((_t.titlePanel.width()-12*_t.maxTabCount-20)/_t.maxTabCount);
                        }else{
                            _t.container.find('.sk-drop-num').hide();
                        }
                    }else{
                        _t.titlePanel.find('.sk-drop-default-txt').show();
                        _t.container.find('.sk-drop-num').hide();
                    }
                    _t.titlePanelContent.empty();
                    for(var i=0;i<list.length && i<_t.maxTabCount;i++){
                        var el = list[i];
                        var temp = $('<span  flag='+el[_t.key]+'>');
                        var temp = $("<span>");
                        temp.addClass('sk-dop-tit-p').attr("flag",el[_t.key]);
                        _t.titlePanelContent.append(temp);
                        temp.renderTpl($dropdown_tpl['dropdown/tpl/tit'],{text:el[_t.text]});
                        if(width){
                            temp.find('.sk-drop-tit-span').css({width:width});
                        }
                    }
                }else{ //单选
                    if(list.length){
                        var el = list[0];
                        _t.container.find('.sk-drop-default-txt').html(el[_t.text]);
                    }else{
                        _t.container.find('.sk-drop-default-txt').html(_t.autoText);
                    }
                }


            },
            /**
             * 框体tab 重新计算一下
             */
            refreshTabShow:function(){
                var _t = this;
                _t.maxTabCount = parseInt((_t.titlePanel.width()-25)/72)||1;  //最大tab数量
                _t.manageTitSpan();

            },
            /**
             * 计算位置类型
             */
            calPostion:function(){
                var _t = this;
                var windowHeight = $(window).height();
                var rect=_t.container[0].getBoundingClientRect();
                if(windowHeight-rect.bottom<200){
                    return 1;
                }else {
                    return 2;
                }
            },
            setPostion:function(type){
                var _t = this;
                var pos;
                if(_t.opts.inside){
                    pos = {left:0,top:0};
                }else{
                    pos = _t.container.offset();
                }
                var w = _t.container.outerWidth(),h=_t.container.outerHeight(),cw=_t.selectBody.outerWidth(),ch=_t.selectBody.outerHeight();
               
                var itemPos;
                if(type==1){//上
                    itemPos= {left:pos.left+w/2-cw/2,top:pos.top-ch-2};
                }else if(type==2){//下
                    itemPos= {left:pos.left+w/2-cw/2,top:pos.top+h+2};
                }
                _t.selectBody.css(itemPos);
                
            },
            /**
             * 重新计算位置
             */
             rePosition:function(){
                var _t = this;
                var type = _t.calPostion();
                _t.setPostion(type);
            }

        };
       
        drop.init();
        if(opts.defaultSelect && opts.defaultSelect.length){
            drop.setSelect(opts.defaultSelect);
        }
      

        return drop;
	}

});
var $select_tpl = {};

$select_tpl["select/tpl/content"] = "<div class=\"sk-select-cont\"><ul class=\"sk-select-ul\"> <%for(var j=0;j< data.length;j++){%> <% var item =data[j]; %> <li class=\"sk-select-li\" flag=\"<%=item[key]%>\"><%=item['displayName']?item['displayName']:item[text]%></li> <%}%> </ul></div>";

$select_tpl["select/tpl/select"] = "<div class=\"sk-select-control\"> <%if(type==1){%> <div class=\"sk-select-tit\"><%=autoText%></div><i class=\"fa fa-angle-down sk-point-icon\" aria-hidden=\"true\"></i> <i class=\"fa fa-times-circle-o sk-point-close\" aria-hidden=\"true\"></i> <%}else{%> <div class=\"sk-select-tit\"><span class=\"sk-ie8-placeholder\"><span class=\"sk-select-placeholder\"><%=sug.placeholder%></span></span><input class=\"sk-select-input\" placeholder=\"<%=sug.placeholder%>\"></div> <%}%> </div>";

$.fn.extend({
    /**
     * 
     * @param {*
     *    display:{key:"code",text:"name"},自定义主键和显示文字
     *    defaultSelect:'',默认选中
     *    data:[],
     *    sug:{placeholder:'',
     *         inputAction:function
     *         },
     *    cbk:''
     *   } options 
     * @returns 
     */
	select: function (options) {
        var defaults={
            display:{},
            defaultSelect:'',
            data:[],
            sug:'',
            inside:false,
            cbk:''
        };
        var opts = $.extend({}, defaults, options);
        this.empty();
        var container =this;
        var R = window.LanData_SK[$.locale||'zh'].R;
        var select = {
            opts:opts,
            selectBody:'',
            checkedData:{},
            orignData:opts.data,
            container:container,
            key:'',//自定义主键
            text:'',//自定义显示名
            disabled:false, //是否可用
            type:'', //1:下拉框，2,动态sugg
            init:function(){
                var _t = this;
                _t.uuid = new Date().getTime()+''+parseInt(Math.random() * 1000);
                _t.autoText = _t.container[0].innerText||R['sk0001'];
                _t.key = _t.opts.display.key||'code';
                _t.text = _t.opts.display.text||'name';
                _t.selectBody = $('<div class="sk-select-body" sel_id="'+_t.uuid+'">');
                if(_t.opts.data && _t.opts.data.length){
                    _t.type = '1';
                }else if(_t.opts.sug){
                    _t.type = '2';
                }
                _t.container.addClass('sk-select').attr('sel_id',_t.uuid);
                _t.container.prop('tabindex',0).prop('hideFocus',true);
                _t.container.renderTpl($select_tpl['select/tpl/select'],{sug:opts.sug||{},autoText:_t.autoText,type:_t.type});
                if(_t.type==1){ 
                    _t.selectBody.renderTpl($select_tpl['select/tpl/content'],{data:opts.data,key:_t.key,text:_t.text});
                    _t.cacheData = {};
                    for(var i=0;i<_t.orignData.length;i++){
                        var temp = _t.orignData[i];
                        _t.cacheData[temp[_t.key]] = temp;
                    }
                }else{
                    if ($.IEVersion() == 8) {
                        _t.container.find('.sk-select-tit').find('.sk-ie8-placeholder').show();
                    }
                }
                if(_t.opts.inside==true){
                    _t.container.append(_t.selectBody);
                    _t.selectBody.data('inside',_t.opts.inside);
                }else{
                    $('body').append(_t.selectBody);
                }
                
                _t.selectBody.width(_t.container.width());
              
               
                _t.bindAction();
                
            },
            /**
             * 获取当前选中数据
             */
            getSelect:function(){
                var _t = this;
                return _t.checkedData;
            },
            /**
             * 设置选中状态
             * @param {*} code 
             */
            setSelect:function(code){
                var _t = this;
                if(code){
                    if(_t.type==1){ //下拉
                        _t.checkedData = _t.cacheData[code];
                        if(!_t.checkedData){
                            return;
                        }
                        _t.selectBody.find('.sk-active').removeClass('sk-active');
                        _t.selectBody.find('li[flag="'+code+'"]').addClass('sk-active');
                        _t.container.find('.sk-select-tit').html(_t.checkedData[_t.text]).addClass('sk-active');
                        _t.container.data('sel_val',{key:_t.checkedData[_t.key],text:_t.checkedData[_t.text]});
                    }else if(Object.prototype.toString.call(code) === '[object Object]'){//sugg
                        var el = code;
                        _t.checkedData = el;
                        _t.container.find('.sk-select-input').val(el[_t.text]);
                        _t.container.data('sel_val',{key:el[_t.key],text:el[_t.text]});
                        _t.container.find('.sk-select-placeholder').hide();
                    }
                    
                }else{
                    _t.selectBody.find('.sk-active').removeClass('sk-active');
                    _t.checkedData = {};
                    _t.container.find('.sk-select-tit').html(_t.autoText).removeClass('sk-active');
                    _t.container.data('sel_val','');
                }
                
            },
            /**
             * 设置不可用
             */
            setDisable:function(flag){
                var _t = this;
                _t.disabled = flag;
                if(flag){
                    _t.container.addClass('sk-disabled');
                }else{
                    _t.container.removeClass('sk-disabled');
                }
            },

            bindAction:function(){
                var _t = this;
                _t.container.on('click','.sk-select-tit',function(){
                    if(_t.disabled || _t.type==2){
                        return;
                    }
                    var type = _t.calPostion();
                    _t.setPostion(type);
                    $('.sk-select-body').removeClass('sk-show');
                    $('.sk-drop-body').removeClass('sk-show');
                    $('.sk-treeDrop-body').removeClass('sk-show');
                    _t.selectBody.toggleClass('sk-show');
                    return false;
                });
                //清空
                _t.container.on('click','.sk-point-close',function(){
                    _t.selectBody.find('.sk-active').removeClass('sk-active');
                    _t.checkedData = {};
                    _t.container.find('.sk-select-tit').html(_t.autoText).removeClass('sk-active');
                    _t.container.data('sel_val','');
                    _t.opts.cbk &&  _t.opts.cbk({});
                    return false;
                }).on('blur','.sk-select-input',function(){
                    var input = this;
                    setTimeout(function(){
                        if(!_t.checkedData){
                            $(input).val('');
                            _t.container.find('.sk-select-placeholder').show();
                        }else{
                            _t.container.find('.sk-select-input').val(_t.checkedData[_t.text]);
                        }
                    },300);
                    
                });
                _t.selectBody.on('click','li',function(e){
                    var el;
                    if(_t.type==1){
                        _t.selectBody.find('.sk-active').removeClass('sk-active');
                        $(this).addClass('sk-active');
                        var flag = $(this).attr('flag');
                        el = _t.cacheData[flag];
                        _t.checkedData = el;
                        _t.container.find('.sk-select-tit').html(el[_t.text]).addClass('sk-active');
                        _t.container.data('sel_val',{key:el[_t.key],text:el[_t.text]});
                    }else{
                        if(_t.currRenderData && _t.currRenderData.length){
                            var flag = $(this).attr('flag');
                            for(var i=0;i<_t.currRenderData.length;i++){
                                var  temp = _t.currRenderData[i];
                                if(temp[_t.key]==flag){
                                    el = temp;
                                }
                            }
                            if(!el){
                                el = {};
                                el[_t.key] = flag;
                                el[_t.text] = $(this).html();
                            }
                            _t.checkedData = el;
                            _t.container.find('.sk-select-input').val(el[_t.text]);
                            _t.container.data('sel_val',{key:el[_t.key],text:el[_t.text]});
                            _t.container.find('.sk-select-placeholder').hide();
                        }
                    }
                    _t.container.focus();
                    _t.opts.cbk &&  _t.opts.cbk(el);
                });
                _t.container.find('.sk-select-input').inputTimer(function(){
                    var val=$(this).val();
                    _t.container.data('sel_val','');
                    // _t.checkedData=null;
                    _t.container.find('.sk-select-placeholder').hide();
                    _t.opts.sug.inputAction && _t.opts.sug.inputAction.call(_t,val);
                   
                },null,300);
            },
            /**
             * 异步渲染数据
             */
            renderData:function(data){
                var _t =this;
                if(_t.type==2 && data && data.length){
                    _t.currRenderData = data;
                    if(data && data.length){
                        var type = _t.calPostion();
                        _t.setPostion(type);
                        _t.selectBody.addClass('sk-show');
                        _t.selectBody.renderTpl($select_tpl['select/tpl/content'],{data:data,key:_t.key,text:_t.text});
                    }
                }
               
            },
            /**
             * 计算位置类型
             */
            calPostion:function(){
                var _t = this;
                var windowHeight = $(window).height();
                var rect=_t.container[0].getBoundingClientRect();
                if(windowHeight-rect.bottom<100){
                    return 1;
                }else {
                    return 2;
                }
            },
            setPostion:function(type){
                var _t = this;
                var pos ;
                if(_t.opts.inside){
                    pos = {left:0,top:0};
                }else{
                    pos = _t.container.offset();
                }
                var w = _t.container.outerWidth(),h=_t.container.outerHeight(),cw=_t.selectBody.outerWidth(),ch=_t.selectBody.outerHeight();
               
                var itemPos;
                if(type==1){//上
                    itemPos= {left:pos.left+w/2-cw/2,top:pos.top-ch-2};
                }else if(type==2){//下
                    itemPos= {left:pos.left+w/2-cw/2,top:pos.top+h+2};
                }
                _t.selectBody.css(itemPos);
                
            },
            /**
             * 重新计算位置
             */
            rePosition:function(){
                var _t = this;
                var type = _t.calPostion();
                _t.setPostion(type);
            }

        };
       
        select.init();
        if(select.type==1 && opts.defaultSelect){
            select.setSelect(opts.defaultSelect);
        }else if(select.type==2 &&  opts.sug && opts.sug.defaultVal){
            select.setSelect(opts.sug.defaultVal);
        }
      

        return select;
	}

});
var $skLightBox_tpl = {};


(function(){
    var lightBox = $.CreateClass({
        init:function(container,opts){
            var _t = this;
            _t.container = container;
            _t.boxNode = $('<div class="sk-lightbox"><span class="sk-lightbox-img "></span></div>');
            _t.container.append(_t.boxNode);
            var pos = 'absolute';
            if(_t.container[0] && _t.container[0].tagName=='BODY'){
                pos = 'fixed';
            }
            if(opts.shadow){
                _t.boxNode.css({
                    position:pos,
                    background:'rgba(0,0,0,0.2)'
                });
            }
        },
        hide:function(){
            var _t = this;
            _t.boxNode.remove();
        },
        remove:function(){
            var _t = this;
            _t.boxNode.remove();
        }
        
    });
    $.fn.extend({
        /**
         * 
         * @param {*
         *    type:1:上，2：下，3：左，4：右,5:auto
         *    message："" 展示的内容,
         *    theam:1橙色，2：黑色，默认：1
         *    width:200px,
         *   } options 
         * @returns 
         */
        lightBox: function (options) {
            var defaults={
                type:1,
                visitType:1
            };
            var opts = $.extend({}, defaults, options);
            var container = this;
            var box = new lightBox(container,opts);
    
            return box;
        }
    
    });
})()

var $switch_tpl = {};

$switch_tpl["switch/tpl/switch"] = "<span class=\"sk-switch\"><span class=\"sk-switch-cont\"><span class=\"sk-switch-panel\"></span></span></span>";

(function () {
    var switchManage = $.CreateClass({
        init: function (container,opts) {
            var _t = this;
            _t.opts = opts;
            _t.container = container;
            container.renderTpl($switch_tpl['switch/tpl/switch'],{});

            if(opts.size=='small'){
                container.find('.sk-switch-cont').addClass('sk-switch-small');
            }
            _t.bindAction();
            _t.setState(opts.state,_t.opts.isInit);
            if(opts.disabled){
                _t.setDisabled();
            }else{
                _t.setEnabled();
            }
        },
        //设置开关状态
        setState:function(state,isInit){
            var _t =this;
            if(_t.disabled){
                return;
            }
            _t.state = state;
            var panel = _t.container.find('.sk-switch-panel');
            var cont = _t.container.find('.sk-switch-cont');
            if(state==1){//开
                panel.animate({
                    left: cont.width()-panel.width()/2
                }, 500);
                cont.removeClass('sk-switch-close');
            }else{
                panel.animate({
                    left: -panel.width()/2
                }, 500);
                cont.addClass('sk-switch-close');
            }
            if(!isInit){
                _t.opts.cbk && _t.opts.cbk.apply(_t.container[0],[_t.state]);
            }
            
        },
        getState:function(){
            return this.state;
        },
        toggleState:function(){
            var _t = this;
            if(_t.state==1){
                _t.setState(0);
            }else{
                _t.setState(1);
            }

        },
        //设置不可用
        setDisabled:function(){
            var _t = this;
            _t.disabled = true;
            _t.container.find('.sk-switch').addClass('sk-switch-disabled');
        },
        //设置可用
        setEnabled:function(){
            var _t = this;
            _t.disabled = false;
            _t.container.find('.sk-switch').removeClass('sk-switch-disabled');
        },
        bindAction:function(){
            var _t = this;
            _t.container.on('click','.sk-switch',function(){
                _t.toggleState();
            });
        }
        
    });
    $.fn.extend({
        /**
         * 
         * @param {*
         *    state:1 //1:开，0：关
         *    disabled：true //true:不可用，false:可用
         *    size:'small'  //normal ,small
         *    cbk:function(){} 回调
         *   } options 
         * @returns 
         */
        switchTurn: function (options) {
            var defaults={
                state:1,
                disabled:false,
                size:'',
                isInit:false
            };
            var opts = $.extend({}, defaults, options);
            var container = this;

            if(container.length>1){
                container.each(function(i,item){
                    var target =  $(item);
                    var curr={
                        state:target.attr('sdk-state')||opts.state,
                        disabled:(target.attr('sdk-disabled')=='true'?true:false)||opts.disabled,
                        size:target.attr('sdk-size'),
                        cbk:opts.cbk
                    }
                    var swt = new switchManage(target,curr);
                });
                return null
            }else{
                if(container.attr('sdk-state')){
                    opts.state = container.attr('sdk-state')||opts.state;
                    opts.size = container.attr('sdk-size')||opts.size;
                    opts.disabled = (container.attr('sdk-disabled')=='true'?true:false)||opts.disabled;
                }
                var swt = new switchManage(container,opts);
                return swt;
            }
        }

    });
})()
var $tab_tpl = {};


$.fn.extend({
    /**
     * 
     * @param {*
     *    defaultCode:1 //默认打开
     *    cbk:function(){} 回调
     *   } options 
     * @returns 
     */
	tabs: function (options) {
        var defaults={
            defaultCode:''
        };
        var opts = $.extend({}, defaults, options);

        var tab = {
            opts:opts,
            init:function(){
                var _t = this;
                _t.headr = _t.container.find('.sk-tabs-head');
                _t.bindAction();
                if(_t.opts.defaultCode){
                    _t.setActive(_t.opts.defaultCode);
                }else{
                    _t.headr.find(".sk-tabs-spn:first").click();
                }
            },
            //设置选中
            setActive:function(code,cus){
                var _t =this;
                var el;
                if(!cus){
                    _t.headr.find('.sk-tabs-spn').removeClass('sk-active');
                    el  = _t.headr.find('.sk-tabs-spn[code='+code+']');
                    el.addClass('sk-active');
                    _t.container.children('.sk-tabs-cont').removeClass('sk-c-active');
                    _t.container.children('.sk-tabs-cont[code='+code+']').addClass('sk-c-active');
                }else{
                    el  = _t.headr.find('.sk-tabs-spn[code='+code+']');
                }
                _t.opts.cbk && _t.opts.cbk.call(el,code);
            },
            bindAction:function(){
                var _t = this;
                _t.container.find('.sk-tabs-spn').on('click',function(){
                    var code = $(this).attr('code');
                    var cus = $(this).attr('unactive');
                    _t.setActive(code,cus);
                });
            }
        };
        tab.container = this;
        tab.init();
        
        return tab;
	}

});
var $table_tpl = {};

$table_tpl["table/tpl/column"] = "<% var list = tableFieldList || [];%> <% if(list.length){ %> <ul class=\"sk-column-container\"> <% for(var i=0;i< list.length;i++){%> <% var item = list[i];%> <li class=\"sk-column-item clearfix <%= item.isDisplay ? 'sk-col-show':'sk-col-hide'%> <%= item.isEditable ? '':'sk-un-edit'%>\" data-key=\"<%= item.fieldKey %>\" data-edit=\"<%=item.isEditable?'1':'2'%>\"><a class=\"fl sk-drag-handle\"></a> <span class=\"fl sk-column-input\"><input class=\"sk-col-ipt column-name\" type=\"text\" holderlan=\"sk0027\" placeholder=\"默认字段名称\" autocomplete=\"off\" data-name=\"<%= item.fieldName%>\" value=\"<%= item.displayFieldName || item.fieldName %>\"> <i class=\"sk-column-close\" aria-hidden=\"true\"></i> </span><span class=\"fl sk-column-wid\"><span class=\"fl sk-col-label\" lan=\"sk0026\">列宽</span> <span class=\"fl\"><input class=\"sk-col-ipt column-width\" type=\"text\" autocomplete=\"off\" value=\"<%= item.fieldWide %>\"></span></span><span class=\"fl sk-column-stt\"><a class=\"sk-column-stt-btn\"></a></span></li> <% }%> </ul> <% } %>";

$table_tpl["table/tpl/config"] = "<div class=\"sk-dialog sk-file-down\" style=\"width:600px;height: 400px;\"><div class=\"sk-dialog-header\"><span class=\"sk-file-tit\" lan=\"sk0028\">自定义列</span></div><div class=\"sk-dialog-content\" style=\"padding: 0 10px;\"><div class=\"sk-table-column-container\"></div></div><div class=\"sk-dialog-footer\"><button class=\"sk-table-config-default\" lan=\"sk0029\">恢复默认</button> <button class=\"sk-table-config-cancel\" lan=\"sk0030\">取消</button> <button class=\"sk-table-config-save\" lan=\"sk0031\">保存</button></div></div>";

$table_tpl["table/tpl/demo"] = "<table class=\"sk-orign-table\"><thead><th width=\"200px\" colspan=\"2\">表头1</th><th width=\"100px\">表头三</th><th width=\"300px\" class=\"sk-sort\">表头1</th><th width=\"100px\" class=\"sk-sort\">表头1</th><th width=\"100px\" colspan=\"1\">表头1</th><th width=\"100px\" colspan=\"1\">表头1</th><th width=\"100px\">表头1</th><th width=\"100px\">表头1</th><th width=\"100px\">表头10</th></thead><tbody></tbody></table>";

$table_tpl["table/tpl/dialog"] = "";

$table_tpl["table/tpl/sort"] = "<span class=\"sk-sort-span\"><i class=\"fa fa-caret-up\"></i> <i class=\"fa fa-caret-down\"></i></span>";

$table_tpl["table/tpl/table"] = "<div class=\"sk-table-head\"><div class=\"sk-table-head-left\"><table class=\"sk-table sk-table-head-left-table\"></table></div><div class=\"sk-table-head-fr\"><table class=\"sk-table sk-table-head-fr-table\"></table></div><div class=\"sk-table-head-right\"><table class=\"sk-table sk-table-head-right-table\"></table></div></div><div class=\"sk-table-cont\"><div class=\"sk-table-cont-c\"><div class=\"sk-table-cont-left\"><table class=\"sk-table sk-table-cont-left-table\"></table></div><div class=\"sk-table-cont-fr\"><table class=\"sk-table sk-table-cont-fr-table\"></table></div><div class=\"sk-table-cont-right\"><table class=\"sk-table sk-table-cont-right-table\"></table></div><div class=\"sk-nodata\"><span class=\"sk-nodata-img icon-sk-nodata\"></span></div></div><div class=\"sk-scroll-x\"><div class=\"sk-scroll-x-cont\"></div></div><div class=\"sk-scroll-y\"><div class=\"sk-scroll-y-cont\"></div></div></div>";

$.fn.extend({
    /**
     * 
     * @param {*
     *    fixedL:0, 左边固定列数
     *    fixedR:0, //右边固定列数
     *    needHover"" 展示的内容
     *    tplPath:'', 模板路径  如果有tplHtml 属性时此属性失效
     *    tplData:'',
     *    tplHtml:''内容渲染
     *    cbk:function(){} 渲染完回调
     *    columnAction:function(){} 自定义列配置完回调,
     *    serverHost: '' 自定义列接口IP,
     *    tableId:'' 自定义列 表唯一ID
     *    scrollAction:function(){}
     *   } options 
     * @returns 
     */
    skTable: function (options) {
        var defaults = {
            fixed: 0,
            fixedL: 0,
            fixedR: 0,
            needHover: true,
            serverHost: ''
        };
        if (this.find('.sk-table-head').length > 0) {
            return;
        }
        var opts = $.extend({}, defaults, options);
        opts.fixedL = opts.fixedL || opts.fixed;
        var table = {
            opts: opts,
            /**
             * 
             * @param {*} isInt 是否是初始化
             */
            rederData: function (isInt) {
                var _t = this;
                var opts = _t.opts,
                    container = this.container;
                _t.el.clTable.find('tbody').remove();
                _t.el.ccTable.find('tbody').remove();
                _t.el.crTable.find('tbody').remove();
                //原始表格
                var orignHead = _t.orignTable.find('thead').clone();
                var orignBody = _t.orignTable.find('tbody').clone();
                if (orignBody.children().length == 0) {
                    _t.container.find('.sk-nodata').show();
                } else {
                    _t.container.find('.sk-nodata').hide();
                }
                if (!opts.fixedL && !opts.fixedR) {
                    if (isInt) {
                        _t.el.hcTable.append(orignHead);
                        var cba = orignHead.clone();
                        cba.find('td,th').html('');
                        _t.el.ccTable.append(cba);
                        container.find('.sk-table-head').find('.sk-sort').append($table_tpl['table/tpl/sort']);
                    }

                    _t.el.ccTable.append(orignBody);

                } else {
                    container.addClass('sk-table-fixed');
                    if (isInt) {
                        //头部
                        var theadHL = $("<thead>"),
                            theadHR = $("<thead>");
                        orignHead.find('tr').each(function (i, r) {
                            var dList = $(r).find('td,th');
                            var tdNumber = opts.fixedL,
                                tRNumber = opts.fixedR;
                            //左边固定头部区域
                            if (tdNumber) {
                                var tr = $('<tr>');
                                theadHL.append(tr);
                                for (var i = 0; i < tdNumber && tdNumber < dList.length; i++) {
                                    var tempD = dList[i];
                                    if (tempD.colSpan > 1) {
                                        tdNumber = tdNumber - (tempD.colSpan - 1)
                                    }
                                    tr.append(tempD);
                                }
                                _t.el.hlTable.append(theadHL);
                            }
                            //右边头部固定区域
                            if (tRNumber) {
                                var tr = $('<tr>');
                                theadHR.append(tr);
                                for (var i = 0; i < tRNumber && tRNumber < dList.length; i++) {
                                    var tempD = dList[dList.length - i - 1];
                                    if (tempD.colSpan > 1) {
                                        tRNumber = tRNumber - (tempD.colSpan - 1)
                                    }
                                    tr.prepend(tempD);
                                }
                                _t.el.hrTable.append(theadHR);
                            }
                        });
                        _t.el.hcTable.append(orignHead);
                        var cba = theadHL.clone(),
                            rba = theadHR.clone();
                        cba.find('td,th').html('');
                        rba.find('td,th').html('');
                        var cbar = orignHead.clone();
                        cbar.find('td,th').html('');
                        _t.el.clTable.append(cba);
                        _t.el.ccTable.append(cbar);
                        _t.el.crTable.append(rba);

                        container.find('.sk-table-head').find('.sk-sort').append($table_tpl['table/tpl/sort']);
                    }

                    //body
                    if (_t.opts.fixedL) {
                        _t.cloneLFixedBody(orignBody);
                        _t.el.headCenterDev.css({
                            marginLeft: container.find('.sk-table-head-left').outerWidth()
                        });
                        _t.el.bodyCenterDev.css({
                            marginLeft: container.find('.sk-table-head-left').outerWidth()
                        });
                    }
                    if (_t.opts.fixedR) {
                        _t.cloneRFixedBody(orignBody);
                        _t.el.headCenterDev.css({
                            marginRight: container.find('.sk-table-head-fr-table').outerWidth()
                        });
                        _t.el.bodyCenterDev.css({
                            marginRight: container.find('.sk-table-head-fr-table').outerWidth()
                        });
                    }

                    _t.el.ccTable.append(orignBody);
                    //对比两边表格的高度
                    var ltr = _t.el.clTable.find('tbody').find('tr'),
                        ctr = _t.el.ccTable.find('tbody').find('tr'),
                        rtr = _t.el.crTable.find('tbody').find('tr');
                    ctr.each(function (i, tr) {
                        var lh = _t.opts.fixedL ? ltr[i].offsetHeight : 0,
                            ch = tr.offsetHeight,
                            rh = _t.opts.fixedR ? rtr[i].offsetHeight : 0;
                        var maxH = lh;
                        maxH = maxH > ch ? maxH : ch;
                        maxH = maxH > rh ? maxH : rh;
                        if (_t.opts.fixedR) {
                            $(rtr[i]).height(Math.ceil(maxH + 1));
                        }
                        $(tr).height(Math.ceil(maxH + 1));
                        if (_t.opts.fixedL) {
                            $(ltr[i]).height(Math.ceil(maxH + 1));
                        }

                    });

                    //对比两边表格表头的高度
                    var lhtr = _t.el.hlTable.find('thead').find('tr'),
                        chtr = _t.el.hcTable.find('thead').find('tr'),
                        rhtr = _t.el.hrTable.find('thead').find('tr');

                    var lh = _t.opts.fixedL ? $(lhtr).height() : 0,
                        ch = $(chtr).height(),
                        rh = _t.opts.fixedR ? $(rhtr).height() : 0;
                    var maxH = lh;
                    maxH = maxH > ch ? maxH : ch;
                    maxH = maxH > rh ? maxH : rh;
                    if (_t.opts.fixedR) {
                        $(rhtr).height(Math.ceil(maxH));
                    }
                    $(chtr).height(Math.ceil(maxH));
                    if (_t.opts.fixedL) {
                        $(lhtr).height(Math.ceil(maxH));
                    }

                    // 对比固定列未设置宽度的thead与tbody中td的宽度
                    var ltds = $(ltr[0]).find('td'),
                        ctds = $(ctr[0]).find('td'),
                        rtds = $(rtr[0]).find('td'),
                        lhths = $(lhtr[0]).find('th'),
                        chths = $(chtr[0]).find('th'),
                        rhths = $(rhtr[0]).find('th');
                    if (_t.opts.fixedL) {
                        ltds.each(function (i, td) {
                            if ($(lhths[i]).attr('width') == undefined) {
                                $(lhths[i]).css({
                                    width: $(td).outerWidth()
                                });
                            }
                        });
                    }
                    ctds.each(function (i, td) {
                        if ($(chths[i]).attr('width') == undefined) {
                            $(chths[i]).css({
                                width: $(td).outerWidth()
                            });
                        }
                    });
                    if (_t.opts.fixedR) {
                        rtds.each(function (i, td) {
                            if ($(rhths[i]).attr('width') == undefined) {
                                $(rhths[i]).css({
                                    width: $(td).outerWidth()
                                });
                            }
                        });
                    }
                }
                var leftObj = _t.el.headLeftDev[0],
                    rightCenterObj = _t.el.headCenterDev[0],
                    rightObj = _t.el.headRightRDev[0];
                var lwidth = leftObj.offsetWidth || leftObj.clientWidth,
                    cwidth = rightCenterObj.offsetWidth || rightCenterObj.clientWidth,
                    rwidth = rightObj.offsetWidth || rightObj.clientWidth;
                var scrollY = _t.container.height() - _t.el.headCenterDev.height() - 2;
                var scrollYC = _t.el.bodyCenterDev.outerHeight();
                var scrollX = lwidth + cwidth + rwidth;
                var scrollXC = lwidth + _t.el.headCenterDev[0].scrollWidth + rwidth;
                _t.el.scrollY.height(scrollY);
                _t.el.scrollCt.height(container.height() - _t.el.headCenterDev.height() - 2);
                _t.el.scrollYCount.height(scrollYC);
                _t.el.scrollX.width(scrollX);
                _t.el.scrollXCount.width(scrollXC);
                if (_t.version == 8) {
                    if (scrollYC > scrollY) {
                        _t.el.scrollY.css({
                            'overflowY': 'scroll'
                        });
                    }
                    if (scrollXC > scrollX) {
                        _t.el.scrollX.css({
                            'overflowX': 'scroll'
                        });
                    }
                }
                opts.cbk && opts.cbk();
            },
            resetTbodyTrHeight: function () {
                var _t = this;
                var ltr = _t.el.clTable.find('tbody').find('tr'),
                    ctr = _t.el.ccTable.find('tbody').find('tr'),
                    rtr = _t.el.crTable.find('tbody').find('tr');
                ctr.each(function (i, tr) {
                    var lh = _t.opts.fixedL ? $(ltr[i]).height() : 0,
                        ch = $(tr).height(),
                        rh = _t.opts.fixedR ? $(rtr[i]).height() : 0;
                    var maxH = lh;
                    maxH = maxH > ch ? maxH : ch;
                    maxH = maxH > rh ? maxH : rh;
                    if (_t.opts.fixedR) {
                        $(rtr[i]).height(Math.ceil(maxH));
                    }
                    $(tr).height(Math.ceil(maxH));
                    if (_t.opts.fixedL) {
                        $(ltr[i]).height(Math.ceil(maxH));
                    }

                });
            },
            /**
             * 复制 左边fixed 框
             *
             */
            cloneLFixedBody: function (orignBody) {
                var _t = this;
                var opts = _t.opts;
                var theadCBody = $("<tbody>");
                var cacheRow = {};
                for (var i = 0; i < opts.fixedL; i++) {
                    cacheRow[i] = 1;
                }
                orignBody.find('tr').each(function (i, r) {
                    var className = $(r).attr('class');
                    var tr = className ? $('<tr class="'+className+'">'):$('<tr>');
                    theadCBody.append(tr);
                    var dList = $(r).find('td,th');

                    var cN = 0; //rowspan 合并的数量
                    for (var i = 0; i < opts.fixedL; i++) {
                        if (cacheRow[i] > 1) {
                            cacheRow[i] = cacheRow[i] - 1;
                            cN++;
                        }
                    }
                    var tdNumber = opts.fixedL - cN;
                    for (var i = 0; i < tdNumber && opts.fixedL < dList.length; i++) {
                        var tempD = dList[i];
                        if (tempD.colSpan > 1) {
                            tdNumber = tdNumber - (tempD.colSpan - 1)
                        }
                        if (tempD.rowSpan > 1) {
                            for (var k = i; k < tdNumber; k++) {
                                if (cacheRow[k] = 1) {
                                    cacheRow[k] = cacheRow[k] + 1;
                                    break;
                                }
                            }
                        }

                        tr.append(tempD);
                    }

                });
                _t.el.clTable.append(theadCBody);

            },
            /**
             * 复制 右边fixed 框
             *
             */
            cloneRFixedBody: function (orignBody) {
                var _t = this;
                var opts = _t.opts;
                var theadCBody = $("<tbody>");
                var cacheRow = {};
                for (var i = 0; i < opts.fixedR; i++) {
                    cacheRow[i] = 1;
                }
                orignBody.find('tr').each(function (i, r) {
                    var className = $(r).attr('class');
                    var tr = className ? $('<tr class="'+className+'">'):$('<tr>');
                    theadCBody.append(tr);
                    var dList = $(r).find('td,th');

                    var cN = 0; //rowspan 合并的数量
                    for (var i = 0; i < opts.fixedR; i++) {
                        if (cacheRow[i] > 1) {
                            cacheRow[i] = cacheRow[i] - 1;
                            cN++;
                        }
                    }
                    var tdNumber = opts.fixedR - cN;
                    for (var i = 0; i < tdNumber && opts.fixedR < dList.length; i++) {
                        var tempD = dList[dList.length - i - 1];
                        if (tempD.colSpan > 1) {
                            tdNumber = tdNumber - (tempD.colSpan - 1)
                        }
                        if (tempD.rowSpan > 1) {

                            for (var k = tdNumber - i - 1; k >= 0; k--) {
                                if (cacheRow[k] = 1) {
                                    cacheRow[k] = cacheRow[k] + 1;
                                    break;
                                }
                            }
                        }
                        tr.prepend(tempD);
                    }

                });
                _t.el.crTable.append(theadCBody);

            },
            //初始化表格
            initEl: function (cbk) {
                var _t = this;
                _t.uuid = new Date().getTime();
                _t.version = $.IEVersion();
                var tpl = _t.opts.tplHtml;
                if (tpl) {
                    var tableTmp = $('<div>');
                    tableTmp.html(tpl);
                    _t.orignTable = tableTmp.find('.sk-orign-table');
                    _t.initData();
                    cbk();
                } else if (_t.opts.tplPath) {
                    var tableTmp = $('<div>');
                    tableTmp.renderPath(_t.opts.tplPath, _t.opts.tplData, function () {
                        _t.orignTable = tableTmp.find('.sk-orign-table');
                        _t.initData();
                        cbk();
                    });
                }

            },
            initData: function () {
                var _t = this;
                var container = _t.container;
                _t.container.renderTpl($table_tpl['table/tpl/table']);
                //表格内容区域
                var headCenterDev = container.find('.sk-table-head-right'),
                    bodyCenterDev = container.find('.sk-table-cont-right');
                var headLeftDev = container.find('.sk-table-head-left'),
                    bodyLeftDev = container.find('.sk-table-cont-left');
                //右边固定表格
                var headRightRDev = container.find('.sk-table-head-fr'),
                    bodyRightDev = container.find('.sk-table-cont-fr');
                //左右四个表格
                var hlTable = container.find('.sk-table-head-left-table'),
                    hcTable = container.find('.sk-table-head-right-table'),
                    clTable = container.find('.sk-table-cont-left-table'),
                    ccTable = container.find('.sk-table-cont-right-table'),
                    hrTable = container.find('.sk-table-head-fr-table'),
                    crTable = container.find('.sk-table-cont-fr-table');
                //纵向滚动条
                var scrollCt = container.find('.sk-table-cont-c'),
                    scrollY = container.find('.sk-scroll-y'),
                    scrollYCount = container.find('.sk-scroll-y-cont');
                //横向滚动条
                var scrollHR = container.find('.sk-table-head-right'),
                    scrollVR = container.find('.sk-table-cont-right'),
                    scrollX = container.find('.sk-scroll-x'),
                    scrollXCount = container.find('.sk-scroll-x-cont');
                _t.el = {
                    headCenterDev: headCenterDev,
                    bodyCenterDev: bodyCenterDev,
                    headLeftDev: headLeftDev,
                    bodyLeftDev: bodyLeftDev,
                    headRightRDev: headRightRDev,
                    bodyRightDev: bodyRightDev,
                    hlTable: hlTable,
                    hcTable: hcTable,
                    clTable: clTable,
                    ccTable: ccTable,
                    hrTable: hrTable,
                    crTable: crTable,
                    scrollCt: scrollCt,
                    scrollY: scrollY,
                    scrollYCount: scrollYCount,
                    scrollHR: scrollHR,
                    scrollVR: scrollVR,
                    scrollX: scrollX,
                    scrollXCount: scrollXCount
                };
            },
            bindAction: function () {
                var _t = this;
                var container = _t.container;

                _t.el.scrollY.on('scroll', function (e) {
                    _t.el.scrollCt.scrollTop(this.scrollTop);
                    _t.opts.scrollAction && _t.opts.scrollAction();
                });
                _t.el.scrollCt.bind("mousewheel DOMMouseScroll", function (e) {
                    var ev = e.originalEvent;
                    var dy = 30;
                    var wheelDelta = (ev.wheelDelta && (ev.wheelDelta > 0 ? 1 : -1)) || (ev.detail && (ev.detail > 0 ? -1 : 1));
                    if (wheelDelta > 0) {
                        dy = -30;
                    }
                    // for(var i=0;i<30;i++){
                    //     var scrollTop = $(this).scrollTop()+dy;
                    //     console.log("scrollTop:"+scrollTop);
                    //     scrollY.scrollTop(scrollTop);
                    //     $(this).scrollTop(scrollTop);
                    // }
                    var scrollTop = $(this).scrollTop() + dy;
                    _t.el.scrollY.scrollTop(scrollTop);
                    $(this).scrollTop(scrollTop);
                    var h = $(this).scrollTop();

                    var b1 = wheelDelta < 0 && h + $(this).height() < this.scrollHeight;
                    var b2 = wheelDelta > 0 && (h > 0);
                    if (b1 || b2) {
                        e.preventDefault();
                    }
                    // _t.opts.scrollAction && _t.opts.scrollAction();
                });


                _t.el.scrollX.on('scroll', function (e) {
                    _t.calShaowBox();
                    var left = this.scrollLeft * (_t.el.scrollHR[0].scrollWidth - _t.el.scrollHR[0].offsetWidth) / (this.scrollWidth - this.offsetWidth);
                    _t.el.scrollHR[0].scrollLeft = left;
                    _t.el.scrollVR[0].scrollLeft = left;
                });
                if (_t.opts.needHover) {
                    container.find('.sk-table-cont').on('mouseenter', 'tr', function () {
                        var _indx = $(this).index();
                        _t.el.clTable.find('tbody').find('tr').eq(_indx).addClass('sk-tr-hover');
                        _t.el.ccTable.find('tbody').find('tr').eq(_indx).addClass('sk-tr-hover');
                        _t.el.crTable.find('tbody').find('tr').eq(_indx).addClass('sk-tr-hover');

                    }).on('mouseleave', 'tr', function () {
                        var _indx = $(this).index();
                        _t.el.clTable.find('tbody').find('tr').eq(_indx).removeClass('sk-tr-hover');
                        _t.el.ccTable.find('tbody').find('tr').eq(_indx).removeClass('sk-tr-hover');
                        _t.el.crTable.find('tbody').find('tr').eq(_indx).removeClass('sk-tr-hover');
                    });
                }

                container.find('.sk-table-head').on('click', '.sk-sort', function () {
                    if (opts.sortAction) {
                        var flag;
                        var sortSpan = $(this).find('.sk-sort-span');
                        if (sortSpan.hasClass('sk-down')) {
                            container.find('.sk-table-head').find('.sk-sort-span').removeClass('sk-up').removeClass('sk-down');
                            sortSpan.addClass('sk-up');
                            flag = 1;
                        } else {
                            container.find('.sk-table-head').find('.sk-sort-span').removeClass('sk-up').removeClass('sk-down');
                            sortSpan.addClass('sk-down');
                            flag = 2;
                        }
                        if ($.IEVersion() == 8) {
                            //ie 低版本
                            var head = document.getElementsByTagName('head')[0],
                                style = document.createElement('style');
                            style.type = 'text/css';
                            if (style.styleSheet) {
                                style.styleSheet.cssText = '.sk-table-container :before,:after{content:none !important';
                                head.appendChild(style);
                                setTimeout(function () {
                                    head.removeChild(style);
                                }, 0);
                            }
                        }

                        _t.opts.sortAction && _t.opts.sortAction.call(_t, this, flag);

                    }
                });
                var nameSpace = "sk_table_" + _t.uuid;
               
                $(window).off('resize.' + nameSpace).on('resize.' + nameSpace, function () {
                    _t.reSize();
                });
                _t.calShaowBox();
            },
            calShaowBox: function () {
                var _t = this;

                if (_t.opts.fixedL) {
                    if (_t.el.scrollX[0].scrollLeft > 5) {
                        _t.el.bodyLeftDev.addClass('sk-shadow-panel');
                        _t.el.headLeftDev.addClass('sk-shadow-panel');
                    } else {
                        _t.el.bodyLeftDev.removeClass('sk-shadow-panel');
                        _t.el.headLeftDev.removeClass('sk-shadow-panel');
                    }
                }
                if (_t.opts.fixedR) {
                    if ((_t.el.scrollX[0].scrollLeft + _t.el.scrollX.width()) < _t.el.scrollX[0].scrollWidth - 5 && _t.opts.fixedR) {
                        _t.el.bodyRightDev.addClass('sk-shadow-rpanel');
                        _t.el.headRightRDev.addClass('sk-shadow-rpanel');
                    } else {
                        _t.el.bodyRightDev.removeClass('sk-shadow-rpanel');
                        _t.el.headRightRDev.removeClass('sk-shadow-rpanel');
                    }
                }
            },
            /**
             * 宽高重新计算
             */
            reSize: function () {
                var _t = this;
                var leftObj = _t.el.headLeftDev[0],
                    rightCenterObj = _t.el.headCenterDev[0],
                    rightObj = _t.el.headRightRDev[0];
                if (!(leftObj && rightObj)) {
                    return;
                }
                var lwidth = leftObj.offsetWidth || leftObj.clientWidth,
                    cwidth = rightCenterObj.offsetWidth || rightCenterObj.clientWidth,
                    rwidth = rightObj.offsetWidth || rightObj.clientWidth;
                var scrollY = _t.container.height() - _t.el.headCenterDev.height() - 2;
                var scrollYC = _t.el.bodyCenterDev.outerHeight();
                var scrollX = lwidth + cwidth + rwidth;
                var scrollXC = lwidth + _t.el.headCenterDev[0].scrollWidth + rwidth;
                _t.el.scrollY.height(scrollY);
                _t.el.scrollCt.height(_t.container.height() - _t.el.headCenterDev.height() - 2);
                _t.el.scrollYCount.height(scrollYC);
                _t.el.scrollX.width(scrollX);
                _t.el.scrollXCount.width(scrollXC);
                if (_t.version == 8) {
                    if (scrollYC > scrollY) {
                        _t.el.scrollY.css({
                            'overflowY': 'scroll'
                        });
                    }
                    if (scrollXC > scrollX) {
                        _t.el.scrollX.css({
                            'overflowX': 'scroll'
                        });
                    }
                }
                if(_t.opts.fixedL || _t.opts.fixedR){
                    _t.resetTbodyTrHeight();
                }
                
            },
            /**
             * 动态渲染数据
             * @param {} tpl 
             */
            rederTplData: function (tpl) {
                var _t = this;
                if (tpl) {
                    var tableTmp = $('<div>');
                    tableTmp.html(tpl);
                    _t.orignTable = tableTmp.find('.sk-orign-table');
                    _t.rederData();
                }
            },
            /**
             * 动态渲染模板数据
             * @param {} tpl 
             */
            rederPathData: function (path, data) {
                var _t = this;
                // _t.el.scrollCt.scrollTop(0);
                // _t.el.scrollY.scrollTop(0);
                // _t.el.scrollX.scrollLeft(0);
                // _t.el.scrollHR.scrollLeft(0);
                // _t.el.scrollVR.scrollLeft(0);
                if (path) {
                    if (_t.isChangeColumn) {
                        _t.opts.tplData = data;
                        _t.initEl(function () {
                            _t.rederData(true);
                            _t.bindAction();
                            _t.isChangeColumn = false;
                        });
                    } else {
                        var tableTmp = $('<div>');
                        tableTmp.renderPath(path, data || {}, function () {
                            _t.orignTable = tableTmp.find('.sk-orign-table');
                            _t.rederData();
                        });
                    }

                }
            },
            /**
             * 自定义列配置
             */
            openConfig: function () {
                var _t = this;
                _t.dialog = $.modelDialog({
                    tplHtml: $.getTpl($table_tpl["table/tpl/config"])
                });
                _t.loadColumnList();
                _t.columnEvent();
            },
            /**
             * 恢复默认
             * @param {*} cbk 
             */
            resetColumn: function (cbk) {
                var _t = this;
                $.ajax({
                    type: "POST",
                    url: _t.opts.serverHost + '/api/outer/platform/customer/table/set_default_head_config',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify({
                        tableId: _t.opts.tableId
                    }),
                    success: function (res) {
                        if (res.code == 200) {
                            _t.isChangeColumn = true;
                            _t.dialog.remove();
                            _t.opts.columnAction && _t.opts.columnAction();
                        }
                    }
                });
            },
            /**
             * 请求获取所有列信息
             * @param {*} data 请求参数
             * @param {*} cbk 请求完成 回调
             */
            getColumnList: function (data, cbk) {
                var _t = this;
                $.ajax({
                    type: "POST",
                    url: _t.opts.serverHost + '/api/outer/platform/customer/table/fetch_head_config',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(data),
                    success: function (res) {
                        if (res.code == 200 && res.data) {
                            cbk && cbk(res.data || []);
                        }
                    }
                });
            },
            /**
             * 加载 获取的table 列信息
             */
            loadColumnList: function () {
                var _t = this;
                var params = {
                    tableId: _t.opts.tableId
                };
                _t.getColumnList(params, function (data) {
                    var columnHtml = $.getTpl($table_tpl['table/tpl/column'], data);
                    _t.dialog.container.find('.sk-table-column-container').html(columnHtml);
                    // 拖拽
                    _t.dialog.container.find('.sk-column-container').sortable({
                        handle: 'a.sk-drag-handle',
                        revert: true,
                        stop: function (event, ui) {}
                    });
                });
            },
            /**
             * 自定义列 保存
             * @param {*} cbk 
             */
            columnSave: function () {
                var _t = this;
                var _list = _t.dialog.container.find('.sk-column-item') || [];
                var _newList = [];
                if (_list.length) {
                    $.each(_list, function (i, ele) {
                        var obj = {
                            displayFieldName: $(ele).find('.column-name').val() || $(ele).find('.column-name').attr('data-name'),
                            fieldKey: $(ele).attr('data-key'),
                            fieldName: $(ele).find('.column-name').attr('data-name'),
                            fieldWide: $(ele).find('.column-width').val(),
                            isDisplay: $(ele).hasClass('sk-col-show') ? true : false,
                            isEditable: $(ele).attr('data-edit') == 1 ? true : false
                        };
                        _newList.push(obj);
                    });
                }
                var _data = {
                    tableId: _t.opts.tableId,
                    tableFieldList: _newList
                };
                $.ajax({
                    type: "POST",
                    url: _t.opts.serverHost + '/api/outer/platform/customer/table/save_head_config',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(_data),
                    success: function (res) {
                        if (res.code == 200) {
                            // 用于标记是否改变了 列，只要保存 rederPathData就要重新渲染
                            _t.isChangeColumn = true;
                            _t.dialog.remove();
                            _t.opts.columnAction && _t.opts.columnAction();
                        }
                    }
                });
            },
            /**
             * 自定义列 事件绑定
             */
            columnEvent: function () {
                var _t = this;
                _t.dialog.container.on('click', '.sk-table-config-cancel', function () {
                    _t.dialog.remove();
                }).on('click', '.sk-table-config-save', function () {
                    _t.columnSave();
                }).on('click', '.sk-table-config-default', function () {
                    _t.resetColumn();
                }).on('click', '.sk-column-stt', function () {
                    var curItem = $(this).parents('.sk-column-item');
                    if (!curItem.hasClass('sk-un-edit')) {
                        if (curItem.hasClass('sk-col-hide')) {
                            curItem.removeClass('sk-col-hide').addClass('sk-col-show');
                        } else if (curItem.hasClass('sk-col-show')) {
                            curItem.removeClass('sk-col-show').addClass('sk-col-hide');
                        }
                    }

                }).on('mousedown', '.sk-drag-handle', function () {
                    $(this).css({
                        cursor: '-webkit-grabbing'
                    });
                }).on('mouseup', '.sk-drag-handle', function () {
                    $(this).css({
                        cursor: '-webkit-grab'
                    });
                }).on('mouseover', '.sk-column-input', function () {
                    $(this).find('.sk-column-close').show();
                }).on('mouseout', '.sk-column-input', function () {
                    $(this).find('.sk-column-close').hide();
                }).on('click', '.sk-column-close', function () {
                    var iptObj = $(this).parent().find('.sk-col-ipt');
                    var defaultV = iptObj.attr('data-name');
                    iptObj.val(defaultV);
                });
            }
        };
        table.container = this;
        table.initEl(function () {
            table.rederData(true);
            table.bindAction();
        });

        return table;
    }

});